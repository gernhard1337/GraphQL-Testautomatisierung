;;;; Serene
;;; com.paren/serene
;;; https://github.com/paren-com/serene
;;; Generate clojure.spec with GraphQL and extend GraphQL with clojure.spec
;;;
;;; DO NOT EDIT THIS FILE!

(ns graphql-tester.specs (:require [clojure.core] [clojure.spec.alpha]))

(clojure.spec.alpha/def :graphql-tester.specs.Location/residents
  (clojure.spec.alpha/coll-of
   (clojure.spec.alpha/nilable :graphql-tester.specs/Character)
   :kind
   clojure.core/sequential?))

(clojure.spec.alpha/def :graphql-tester.specs/Characters
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.Characters/info
    :graphql-tester.specs.Characters/results
    :graphql-tester.specs.Characters/__typename]))

(clojure.spec.alpha/def :graphql-tester.specs.__Schema/subscriptionType
  (clojure.spec.alpha/nilable :graphql-tester.specs/__Type))

(clojure.spec.alpha/def :graphql-tester.specs.Query.characters/page
  (clojure.spec.alpha/nilable :graphql-tester.specs/Int))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/FIELD_DEFINITION
  #{"FIELD_DEFINITION"})

(clojure.spec.alpha/def :graphql-tester.specs/FilterEpisode
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.FilterEpisode/episode :graphql-tester.specs.FilterEpisode/name]
   :req-un
   []))

(clojure.spec.alpha/def :graphql-tester.specs.__Schema/types
  (clojure.spec.alpha/coll-of :graphql-tester.specs/__Type :kind clojure.core/sequential?))

(clojure.spec.alpha/def :graphql-tester.specs.Character/name
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.Episodes.results/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs/String clojure.core/string?)

(clojure.spec.alpha/def :graphql-tester.specs.Character.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/SUBSCRIPTION #{"SUBSCRIPTION"})

(clojure.spec.alpha/def :graphql-tester.specs.Characters/info
  (clojure.spec.alpha/nilable :graphql-tester.specs/Info))

(clojure.spec.alpha/def :graphql-tester.specs/Query
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.Query/character
    :graphql-tester.specs.Query/characters
    :graphql-tester.specs.Query/charactersByIds
    :graphql-tester.specs.Query/episode
    :graphql-tester.specs.Query/episodes
    :graphql-tester.specs.Query/episodesByIds
    :graphql-tester.specs.Query/location
    :graphql-tester.specs.Query/locations
    :graphql-tester.specs.Query/locationsByIds
    :graphql-tester.specs.Query/__typename]))

(clojure.spec.alpha/def :graphql-tester.specs/__InputValue
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.__InputValue/defaultValue
    :graphql-tester.specs.__InputValue/description
    :graphql-tester.specs.__InputValue/name
    :graphql-tester.specs.__InputValue/type
    :graphql-tester.specs.__InputValue/__typename]))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/FRAGMENT_SPREAD
  #{"FRAGMENT_SPREAD"})

(clojure.spec.alpha/def :graphql-tester.specs.Episode/created
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.CacheControlScope/PUBLIC #{"PUBLIC"})

(clojure.spec.alpha/def :graphql-tester.specs.Info/pages
  (clojure.spec.alpha/nilable :graphql-tester.specs/Int))

(clojure.spec.alpha/def :graphql-tester.specs.__Schema/__typename #{"__Schema"})

(clojure.spec.alpha/def :graphql-tester.specs.Character.type/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__Field.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__InputValue.type/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Location.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs/__Directive
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.__Directive/args
    :graphql-tester.specs.__Directive/description
    :graphql-tester.specs.__Directive/locations
    :graphql-tester.specs.__Directive/name
    :graphql-tester.specs.__Directive/__typename]))

(clojure.spec.alpha/def :graphql-tester.specs.Episodes.info/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__Field.deprecationReason/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Query/location
  (clojure.spec.alpha/nilable :graphql-tester.specs/Location))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/SCHEMA #{"SCHEMA"})

(clojure.spec.alpha/def :graphql-tester.specs.__Schema.subscriptionType/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.FilterCharacter/status
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.Query.episodesByIds/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:graphql-tester.specs.Query.episodesByIds/ids]))

(clojure.spec.alpha/def :graphql-tester.specs.Info/next
  (clojure.spec.alpha/nilable :graphql-tester.specs/Int))

(clojure.spec.alpha/def :graphql-tester.specs.Character/location
  (clojure.spec.alpha/nilable :graphql-tester.specs/Location))

(clojure.spec.alpha/def :graphql-tester.specs.Episode/episode
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.Character/type
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs/__DirectiveLocation
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :__DirectiveLocation/ARGUMENT_DEFINITION
    :graphql-tester.specs.__DirectiveLocation/ARGUMENT_DEFINITION
    :__DirectiveLocation/ENUM
    :graphql-tester.specs.__DirectiveLocation/ENUM
    :__DirectiveLocation/ENUM_VALUE
    :graphql-tester.specs.__DirectiveLocation/ENUM_VALUE
    :__DirectiveLocation/FIELD
    :graphql-tester.specs.__DirectiveLocation/FIELD
    :__DirectiveLocation/FIELD_DEFINITION
    :graphql-tester.specs.__DirectiveLocation/FIELD_DEFINITION
    :__DirectiveLocation/FRAGMENT_DEFINITION
    :graphql-tester.specs.__DirectiveLocation/FRAGMENT_DEFINITION
    :__DirectiveLocation/FRAGMENT_SPREAD
    :graphql-tester.specs.__DirectiveLocation/FRAGMENT_SPREAD
    :__DirectiveLocation/INLINE_FRAGMENT
    :graphql-tester.specs.__DirectiveLocation/INLINE_FRAGMENT
    :__DirectiveLocation/INPUT_FIELD_DEFINITION
    :graphql-tester.specs.__DirectiveLocation/INPUT_FIELD_DEFINITION
    :__DirectiveLocation/INPUT_OBJECT
    :graphql-tester.specs.__DirectiveLocation/INPUT_OBJECT
    :__DirectiveLocation/INTERFACE
    :graphql-tester.specs.__DirectiveLocation/INTERFACE
    :__DirectiveLocation/MUTATION
    :graphql-tester.specs.__DirectiveLocation/MUTATION
    :__DirectiveLocation/OBJECT
    :graphql-tester.specs.__DirectiveLocation/OBJECT
    :__DirectiveLocation/QUERY
    :graphql-tester.specs.__DirectiveLocation/QUERY
    :__DirectiveLocation/SCALAR
    :graphql-tester.specs.__DirectiveLocation/SCALAR
    :__DirectiveLocation/SCHEMA
    :graphql-tester.specs.__DirectiveLocation/SCHEMA
    :__DirectiveLocation/SUBSCRIPTION
    :graphql-tester.specs.__DirectiveLocation/SUBSCRIPTION
    :__DirectiveLocation/UNION
    :graphql-tester.specs.__DirectiveLocation/UNION
    :__DirectiveLocation/VARIABLE_DEFINITION
    :graphql-tester.specs.__DirectiveLocation/VARIABLE_DEFINITION)))

(clojure.spec.alpha/def :graphql-tester.specs.Location/dimension
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.Query.character/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:graphql-tester.specs.Query.character/id]))

(clojure.spec.alpha/def :graphql-tester.specs.Character.created/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Locations/results
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :graphql-tester.specs/Location)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :graphql-tester.specs.Location.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__Type/inputFields
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :graphql-tester.specs/__InputValue :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :graphql-tester.specs.__EnumValue.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Info/prev
  (clojure.spec.alpha/nilable :graphql-tester.specs/Int))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/MUTATION #{"MUTATION"})

(clojure.spec.alpha/def :graphql-tester.specs/__Schema
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.__Schema/directives
    :graphql-tester.specs.__Schema/mutationType
    :graphql-tester.specs.__Schema/queryType
    :graphql-tester.specs.__Schema/subscriptionType
    :graphql-tester.specs.__Schema/types
    :graphql-tester.specs.__Schema/__typename]))

(clojure.spec.alpha/def :graphql-tester.specs.__Directive.args/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs/Character
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.Character/created
    :graphql-tester.specs.Character/episode
    :graphql-tester.specs.Character/gender
    :graphql-tester.specs.Character/id
    :graphql-tester.specs.Character/image
    :graphql-tester.specs.Character/location
    :graphql-tester.specs.Character/name
    :graphql-tester.specs.Character/origin
    :graphql-tester.specs.Character/species
    :graphql-tester.specs.Character/status
    :graphql-tester.specs.Character/type
    :graphql-tester.specs.Character/__typename]))

(clojure.spec.alpha/def :graphql-tester.specs/__TypeKind
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :__TypeKind/ENUM
    :graphql-tester.specs.__TypeKind/ENUM
    :__TypeKind/INPUT_OBJECT
    :graphql-tester.specs.__TypeKind/INPUT_OBJECT
    :__TypeKind/INTERFACE
    :graphql-tester.specs.__TypeKind/INTERFACE
    :__TypeKind/LIST
    :graphql-tester.specs.__TypeKind/LIST
    :__TypeKind/NON_NULL
    :graphql-tester.specs.__TypeKind/NON_NULL
    :__TypeKind/OBJECT
    :graphql-tester.specs.__TypeKind/OBJECT
    :__TypeKind/SCALAR
    :graphql-tester.specs.__TypeKind/SCALAR
    :__TypeKind/UNION
    :graphql-tester.specs.__TypeKind/UNION)))

(clojure.spec.alpha/def :graphql-tester.specs.__EnumValue.isDeprecated/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__Directive.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Query.locations/page
  (clojure.spec.alpha/nilable :graphql-tester.specs/Int))

(clojure.spec.alpha/def :graphql-tester.specs.Query.location/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:graphql-tester.specs.Query.location/id]))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/OBJECT #{"OBJECT"})

(clojure.spec.alpha/def :graphql-tester.specs/__EnumValue
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.__EnumValue/deprecationReason
    :graphql-tester.specs.__EnumValue/description
    :graphql-tester.specs.__EnumValue/isDeprecated
    :graphql-tester.specs.__EnumValue/name
    :graphql-tester.specs.__EnumValue/__typename]))

(clojure.spec.alpha/def :graphql-tester.specs.Locations/__typename #{"Locations"})

(clojure.spec.alpha/def :graphql-tester.specs/Info
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.Info/count
    :graphql-tester.specs.Info/next
    :graphql-tester.specs.Info/pages
    :graphql-tester.specs.Info/prev
    :graphql-tester.specs.Info/__typename]))

(clojure.spec.alpha/def :graphql-tester.specs.__EnumValue/deprecationReason
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.__Type.enumValues/includeDeprecated
  (clojure.spec.alpha/nilable :graphql-tester.specs/Boolean))

(clojure.spec.alpha/def :graphql-tester.specs.Locations.info/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Query.characters/filter
  (clojure.spec.alpha/nilable :graphql-tester.specs/FilterCharacter))

(clojure.spec.alpha/def :graphql-tester.specs.Episode.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Query.episodes/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.Query.episodes/filter :graphql-tester.specs.Query.episodes/page]
   :req-un
   []))

(clojure.spec.alpha/def :graphql-tester.specs.Episode.characters/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/VARIABLE_DEFINITION
  #{"VARIABLE_DEFINITION"})

(clojure.spec.alpha/def :graphql-tester.specs.Query/character
  (clojure.spec.alpha/nilable :graphql-tester.specs/Character))

(clojure.spec.alpha/def :graphql-tester.specs.Episodes/results
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :graphql-tester.specs/Episode)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :graphql-tester.specs.__Type.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__Directive.locations/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs/ID clojure.core/string?)

(clojure.spec.alpha/def :graphql-tester.specs.__EnumValue.deprecationReason/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__TypeKind/INTERFACE #{"INTERFACE"})

(clojure.spec.alpha/def :graphql-tester.specs.Episode.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__Type/__typename #{"__Type"})

(clojure.spec.alpha/def :graphql-tester.specs.FilterCharacter/gender
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs/Location
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.Location/created
    :graphql-tester.specs.Location/dimension
    :graphql-tester.specs.Location/id
    :graphql-tester.specs.Location/name
    :graphql-tester.specs.Location/residents
    :graphql-tester.specs.Location/type
    :graphql-tester.specs.Location/__typename]))

(clojure.spec.alpha/def :graphql-tester.specs.__TypeKind/SCALAR #{"SCALAR"})

(clojure.spec.alpha/def :graphql-tester.specs.Episode/__typename #{"Episode"})

(clojure.spec.alpha/def :graphql-tester.specs/Int clojure.core/integer?)

(clojure.spec.alpha/def :graphql-tester.specs.Character.status/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__Type/ofType
  (clojure.spec.alpha/nilable :graphql-tester.specs/__Type))

(clojure.spec.alpha/def :graphql-tester.specs.__Type.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Character/status
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.__TypeKind/UNION #{"UNION"})

(clojure.spec.alpha/def :graphql-tester.specs.Episodes/__typename #{"Episodes"})

(clojure.spec.alpha/def :graphql-tester.specs.__Field/__typename #{"__Field"})

(clojure.spec.alpha/def :graphql-tester.specs.Character.location/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.FilterLocation/dimension
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.__Field.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Info/count
  (clojure.spec.alpha/nilable :graphql-tester.specs/Int))

(clojure.spec.alpha/def :graphql-tester.specs.Episodes.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Character/id
  (clojure.spec.alpha/nilable :graphql-tester.specs/ID))

(clojure.spec.alpha/def :graphql-tester.specs.__TypeKind/LIST #{"LIST"})

(clojure.spec.alpha/def :graphql-tester.specs.__Field/deprecationReason
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.__Type.possibleTypes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Episode/characters
  (clojure.spec.alpha/coll-of
   (clojure.spec.alpha/nilable :graphql-tester.specs/Character)
   :kind
   clojure.core/sequential?))

(clojure.spec.alpha/def :graphql-tester.specs.Character.image/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Character.episode/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Query.episode/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:graphql-tester.specs.Query.episode/id]))

(clojure.spec.alpha/def :graphql-tester.specs.Location/__typename #{"Location"})

(clojure.spec.alpha/def :graphql-tester.specs.Episode.created/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/ARGUMENT_DEFINITION
  #{"ARGUMENT_DEFINITION"})

(clojure.spec.alpha/def :graphql-tester.specs.Query.episodes/page
  (clojure.spec.alpha/nilable :graphql-tester.specs/Int))

(clojure.spec.alpha/def :graphql-tester.specs.Query/episodesByIds
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :graphql-tester.specs/Episode)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :graphql-tester.specs.__Directive/args
  (clojure.spec.alpha/coll-of :graphql-tester.specs/__InputValue :kind clojure.core/sequential?))

(clojure.spec.alpha/def :graphql-tester.specs.__Directive/description
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.Query.locations/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.Query.locations/filter :graphql-tester.specs.Query.locations/page]
   :req-un
   []))

(clojure.spec.alpha/def :graphql-tester.specs.Episode.air_date/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.FilterEpisode/name
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs/Upload clojure.core/any?)

(clojure.spec.alpha/def :graphql-tester.specs.__Type/possibleTypes
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :graphql-tester.specs/__Type :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/ENUM_VALUE #{"ENUM_VALUE"})

(clojure.spec.alpha/def :graphql-tester.specs.__EnumValue/description
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.__Type.enumValues/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.__Type.enumValues/includeDeprecated]
   :req-un
   []))

(clojure.spec.alpha/def :graphql-tester.specs.Character/image
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/INPUT_OBJECT #{"INPUT_OBJECT"})

(clojure.spec.alpha/def :graphql-tester.specs.__InputValue.defaultValue/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Character.species/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Character/origin
  (clojure.spec.alpha/nilable :graphql-tester.specs/Location))

(clojure.spec.alpha/def :graphql-tester.specs.__Schema.queryType/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__InputValue.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Query/episodes
  (clojure.spec.alpha/nilable :graphql-tester.specs/Episodes))

(clojure.spec.alpha/def :graphql-tester.specs.Locations.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Characters.info/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Query.episodes/filter
  (clojure.spec.alpha/nilable :graphql-tester.specs/FilterEpisode))

(clojure.spec.alpha/def :graphql-tester.specs.__Schema.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs/__Field
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.__Field/args
    :graphql-tester.specs.__Field/deprecationReason
    :graphql-tester.specs.__Field/description
    :graphql-tester.specs.__Field/isDeprecated
    :graphql-tester.specs.__Field/name
    :graphql-tester.specs.__Field/type
    :graphql-tester.specs.__Field/__typename]))

(clojure.spec.alpha/def :graphql-tester.specs.Character.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Character/gender
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.__InputValue.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__Type.fields/includeDeprecated
  (clojure.spec.alpha/nilable :graphql-tester.specs/Boolean))

(clojure.spec.alpha/def :graphql-tester.specs.Query.characters/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.Query.characters/filter :graphql-tester.specs.Query.characters/page]
   :req-un
   []))

(clojure.spec.alpha/def :graphql-tester.specs.__Schema.directives/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Location/type
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.Location.created/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/QUERY #{"QUERY"})

(clojure.spec.alpha/def :graphql-tester.specs.__Type/enumValues
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :graphql-tester.specs/__EnumValue :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :graphql-tester.specs.Query.charactersByIds/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:graphql-tester.specs.Query.charactersByIds/ids]))

(clojure.spec.alpha/def :graphql-tester.specs.__Type.inputFields/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Character/episode
  (clojure.spec.alpha/coll-of
   (clojure.spec.alpha/nilable :graphql-tester.specs/Episode)
   :kind
   clojure.core/sequential?))

(clojure.spec.alpha/def :graphql-tester.specs.__InputValue/defaultValue
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.Character/species
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.Info.count/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__Type/fields
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :graphql-tester.specs/__Field :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :graphql-tester.specs.__TypeKind/ENUM #{"ENUM"})

(clojure.spec.alpha/def :graphql-tester.specs.Characters.results/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Query/charactersByIds
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :graphql-tester.specs/Character)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :graphql-tester.specs.Episodes/info
  (clojure.spec.alpha/nilable :graphql-tester.specs/Info))

(clojure.spec.alpha/def :graphql-tester.specs.Location/name
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.Location.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__Field.args/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Info.prev/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Info.next/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__Field.isDeprecated/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Character/created
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs/Episode
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.Episode/air_date
    :graphql-tester.specs.Episode/characters
    :graphql-tester.specs.Episode/created
    :graphql-tester.specs.Episode/episode
    :graphql-tester.specs.Episode/id
    :graphql-tester.specs.Episode/name
    :graphql-tester.specs.Episode/__typename]))

(clojure.spec.alpha/def :graphql-tester.specs.Location.type/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Info/__typename #{"Info"})

(clojure.spec.alpha/def :graphql-tester.specs.__Type.interfaces/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/INTERFACE #{"INTERFACE"})

(clojure.spec.alpha/def :graphql-tester.specs.__EnumValue/__typename #{"__EnumValue"})

(clojure.spec.alpha/def :graphql-tester.specs.__Schema.types/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs/FilterCharacter
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.FilterCharacter/gender
    :graphql-tester.specs.FilterCharacter/name
    :graphql-tester.specs.FilterCharacter/species
    :graphql-tester.specs.FilterCharacter/status
    :graphql-tester.specs.FilterCharacter/type]
   :req-un
   []))

(clojure.spec.alpha/def :graphql-tester.specs.Character.origin/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Query.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/SCALAR #{"SCALAR"})

(clojure.spec.alpha/def :graphql-tester.specs/FilterLocation
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.FilterLocation/dimension
    :graphql-tester.specs.FilterLocation/name
    :graphql-tester.specs.FilterLocation/type]
   :req-un
   []))

(clojure.spec.alpha/def :graphql-tester.specs.Query.episodesByIds/ids
  (clojure.spec.alpha/coll-of :graphql-tester.specs/ID :kind clojure.core/sequential?))

(clojure.spec.alpha/def :graphql-tester.specs.__Type.fields/&args
  (clojure.spec.alpha/keys :opt-un [:graphql-tester.specs.__Type.fields/includeDeprecated] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Characters/results
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :graphql-tester.specs/Character)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :graphql-tester.specs.__Type/name
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.__Directive/__typename #{"__Directive"})

(clojure.spec.alpha/def :graphql-tester.specs.Query/episode
  (clojure.spec.alpha/nilable :graphql-tester.specs/Episode))

(clojure.spec.alpha/def :graphql-tester.specs.__Field.type/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Query/locations
  (clojure.spec.alpha/nilable :graphql-tester.specs/Locations))

(clojure.spec.alpha/def :graphql-tester.specs.Locations/info
  (clojure.spec.alpha/nilable :graphql-tester.specs/Info))

(clojure.spec.alpha/def :graphql-tester.specs.Episode.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Episode/name
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/INPUT_FIELD_DEFINITION
  #{"INPUT_FIELD_DEFINITION"})

(clojure.spec.alpha/def :graphql-tester.specs.__Schema.mutationType/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__InputValue/description
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.Query/locationsByIds
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :graphql-tester.specs/Location)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :graphql-tester.specs.Location.dimension/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/INLINE_FRAGMENT
  #{"INLINE_FRAGMENT"})

(clojure.spec.alpha/def :graphql-tester.specs.FilterCharacter/name
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.__Schema/mutationType
  (clojure.spec.alpha/nilable :graphql-tester.specs/__Type))

(clojure.spec.alpha/def :graphql-tester.specs.__Type.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Query.locations/filter
  (clojure.spec.alpha/nilable :graphql-tester.specs/FilterLocation))

(clojure.spec.alpha/def :graphql-tester.specs.__Field/args
  (clojure.spec.alpha/coll-of :graphql-tester.specs/__InputValue :kind clojure.core/sequential?))

(clojure.spec.alpha/def :graphql-tester.specs/Boolean clojure.core/boolean?)

(clojure.spec.alpha/def :graphql-tester.specs.__Field/description
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs/__Type
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.__Type/description
    :graphql-tester.specs.__Type/enumValues
    :graphql-tester.specs.__Type/fields
    :graphql-tester.specs.__Type/inputFields
    :graphql-tester.specs.__Type/interfaces
    :graphql-tester.specs.__Type/kind
    :graphql-tester.specs.__Type/name
    :graphql-tester.specs.__Type/ofType
    :graphql-tester.specs.__Type/possibleTypes
    :graphql-tester.specs.__Type/__typename]))

(clojure.spec.alpha/def :graphql-tester.specs.Characters/__typename #{"Characters"})

(clojure.spec.alpha/def :graphql-tester.specs.__Directive/locations
  (clojure.spec.alpha/coll-of
   :graphql-tester.specs/__DirectiveLocation
   :kind
   clojure.core/sequential?))

(clojure.spec.alpha/def :graphql-tester.specs.__TypeKind/OBJECT #{"OBJECT"})

(clojure.spec.alpha/def :graphql-tester.specs.Characters.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.FilterCharacter/species
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.FilterLocation/type
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.Episode/id
  (clojure.spec.alpha/nilable :graphql-tester.specs/ID))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/FRAGMENT_DEFINITION
  #{"FRAGMENT_DEFINITION"})

(clojure.spec.alpha/def :graphql-tester.specs.__Type/description
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.Character.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Location.residents/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__TypeKind/NON_NULL #{"NON_NULL"})

(clojure.spec.alpha/def :graphql-tester.specs.__InputValue.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.FilterLocation/name
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.__Type/interfaces
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :graphql-tester.specs/__Type :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :graphql-tester.specs.__Directive.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs/Episodes
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.Episodes/info
    :graphql-tester.specs.Episodes/results
    :graphql-tester.specs.Episodes/__typename]))

(clojure.spec.alpha/def :graphql-tester.specs.CacheControlScope/PRIVATE #{"PRIVATE"})

(clojure.spec.alpha/def :graphql-tester.specs.Query.charactersByIds/ids
  (clojure.spec.alpha/coll-of :graphql-tester.specs/ID :kind clojure.core/sequential?))

(clojure.spec.alpha/def :graphql-tester.specs.FilterCharacter/type
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/FIELD #{"FIELD"})

(clojure.spec.alpha/def :graphql-tester.specs.__InputValue/__typename #{"__InputValue"})

(clojure.spec.alpha/def :graphql-tester.specs.Query/characters
  (clojure.spec.alpha/nilable :graphql-tester.specs/Characters))

(clojure.spec.alpha/def :graphql-tester.specs.Query.locationsByIds/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:graphql-tester.specs.Query.locationsByIds/ids]))

(clojure.spec.alpha/def :graphql-tester.specs.__TypeKind/INPUT_OBJECT #{"INPUT_OBJECT"})

(clojure.spec.alpha/def :graphql-tester.specs.FilterEpisode/episode
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.Character/__typename #{"Character"})

(clojure.spec.alpha/def :graphql-tester.specs.__EnumValue.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Locations.results/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Episode/air_date
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.__Directive.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Query/__typename #{"Query"})

(clojure.spec.alpha/def :graphql-tester.specs.Info.pages/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__Type.ofType/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Info.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__EnumValue.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Location/created
  (clojure.spec.alpha/nilable :graphql-tester.specs/String))

(clojure.spec.alpha/def :graphql-tester.specs.__Schema/directives
  (clojure.spec.alpha/coll-of :graphql-tester.specs/__Directive :kind clojure.core/sequential?))

(clojure.spec.alpha/def :graphql-tester.specs.Location/id
  (clojure.spec.alpha/nilable :graphql-tester.specs/ID))

(clojure.spec.alpha/def :graphql-tester.specs/CacheControlScope
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :CacheControlScope/PRIVATE
    :graphql-tester.specs.CacheControlScope/PRIVATE
    :CacheControlScope/PUBLIC
    :graphql-tester.specs.CacheControlScope/PUBLIC)))

(clojure.spec.alpha/def :graphql-tester.specs.Query.locationsByIds/ids
  (clojure.spec.alpha/coll-of :graphql-tester.specs/ID :kind clojure.core/sequential?))

(clojure.spec.alpha/def :graphql-tester.specs.__Field.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Episode.episode/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/UNION #{"UNION"})

(clojure.spec.alpha/def :graphql-tester.specs.Character.gender/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.__DirectiveLocation/ENUM #{"ENUM"})

(clojure.spec.alpha/def :graphql-tester.specs/Locations
  (clojure.spec.alpha/keys
   :opt-un
   [:graphql-tester.specs.Locations/info
    :graphql-tester.specs.Locations/results
    :graphql-tester.specs.Locations/__typename]))

(clojure.spec.alpha/def :graphql-tester.specs.__Type.kind/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :graphql-tester.specs.Query.character/id :graphql-tester.specs/ID)

(clojure.spec.alpha/def :graphql-tester.specs.Query.episode/id :graphql-tester.specs/ID)

(clojure.spec.alpha/def :graphql-tester.specs.Query.location/id :graphql-tester.specs/ID)

(clojure.spec.alpha/def :graphql-tester.specs.__Directive/name :graphql-tester.specs/String)

(clojure.spec.alpha/def :graphql-tester.specs.__EnumValue/isDeprecated
  :graphql-tester.specs/Boolean)

(clojure.spec.alpha/def :graphql-tester.specs.__EnumValue/name :graphql-tester.specs/String)

(clojure.spec.alpha/def :graphql-tester.specs.__Field/isDeprecated :graphql-tester.specs/Boolean)

(clojure.spec.alpha/def :graphql-tester.specs.__Field/name :graphql-tester.specs/String)

(clojure.spec.alpha/def :graphql-tester.specs.__Field/type :graphql-tester.specs/__Type)

(clojure.spec.alpha/def :graphql-tester.specs.__InputValue/name :graphql-tester.specs/String)

(clojure.spec.alpha/def :graphql-tester.specs.__InputValue/type :graphql-tester.specs/__Type)

(clojure.spec.alpha/def :graphql-tester.specs.__Schema/queryType :graphql-tester.specs/__Type)

(clojure.spec.alpha/def :graphql-tester.specs.__Type/kind :graphql-tester.specs/__TypeKind)
